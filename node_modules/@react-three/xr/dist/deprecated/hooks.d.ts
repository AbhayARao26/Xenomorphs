/// <reference types="webxr" />
import { RefObject } from 'react';
import { Group, Intersection, XRControllerEventType as ThreeXRControllerEventType } from 'three';
import { PointerEvent } from '@pmndrs/pointer-events';
declare const eventTranslations: {
    onBlur: string;
    onHover: string;
    onMove: string;
    onSelect: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSelectEnd: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSelectStart: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSqueeze: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSqueezeEnd: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
    onSqueezeStart: {
        type: string;
        filter: (e: PointerEvent<globalThis.PointerEvent>) => boolean;
    };
};
/**
 * @deprecated
 */
export declare function useInteraction(ref: RefObject<Group>, type: keyof typeof eventTranslations, handler?: (event: {
    intersection: Intersection;
    intersections: Array<Intersection>;
    target: any;
}) => void): void;
/**
 * @deprecated
 */
export declare function useXREvent(type: Exclude<ThreeXRControllerEventType, XRSessionEventType | 'connected' | 'disconnected'>, handler: (event: {
    type: Exclude<ThreeXRControllerEventType, XRSessionEventType | 'connected' | 'disconnected'>;
    data: XRInputSource;
}) => void, { handedness }?: {
    handedness?: XRHandedness;
}): void;
export {};
