import { useEffect, useRef } from 'react';
import { PointerEvent } from '@pmndrs/pointer-events';
import { useXR } from '../xr.js';
const eventTranslations = {
    onBlur: 'pointerleave',
    onHover: 'pointerenter',
    onMove: 'pointermove',
    onSelect: {
        type: 'click',
        filter: (e) => e.pointerType === 'ray',
    },
    onSelectEnd: {
        type: 'pointerup',
        filter: (e) => e.pointerType === 'ray',
    },
    onSelectStart: {
        type: 'pointerdown',
        filter: (e) => e.pointerType === 'ray',
    },
    onSqueeze: {
        type: 'click',
        filter: (e) => e.pointerType === 'grab',
    },
    onSqueezeEnd: {
        type: 'pointerup',
        filter: (e) => e.pointerType === 'grab',
    },
    onSqueezeStart: {
        type: 'pointerdown',
        filter: (e) => e.pointerType === 'grab',
    },
};
/**
 * @deprecated
 */
export function useInteraction(ref, type, handler) {
    const handlerRef = useRef(handler);
    handlerRef.current = handler;
    useEffect(() => {
        const { current } = ref;
        if (current == null) {
            return;
        }
        const translation = eventTranslations[type];
        const fn = typeof translation === 'string'
            ? (event) => handlerRef.current?.({ intersection: event, intersections: [event], target: event.pointerState })
            : (event) => {
                if (event instanceof PointerEvent && !translation.filter(event)) {
                    return;
                }
                handlerRef.current?.({ intersection: event, intersections: [event], target: event.pointerState });
            };
        const eventName = typeof translation === 'string' ? translation : translation.type;
        current.addEventListener(eventName, fn);
        return () => current.removeEventListener(eventName, fn);
    }, [ref, type]);
}
/**
 * @deprecated
 */
export function useXREvent(type, handler, { handedness } = {}) {
    const session = useXR((xr) => xr.session);
    const handlerRef = useRef(handler);
    handlerRef.current = handler;
    useEffect(() => {
        if (session == null) {
            return;
        }
        const fn = (e) => {
            handlerRef.current?.({
                type: e.type,
                data: e.inputSource,
            });
        };
        session.addEventListener(type, fn);
        return session.removeEventListener(type, fn);
    }, [session, handedness, type]);
}
