/// <reference types="react" />
import { MeshProps } from '@react-three/fiber';
import { BufferGeometry, Mesh } from 'three';
/**
 * component for rendering a mesh for the XRMesh based on the detected mesh geometry
 */
export declare const XRMeshModel: import("react").ForwardRefExoticComponent<Omit<MeshProps, "ref"> & import("react").RefAttributes<Mesh<BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>>>;
/**
 * hook for getting the detected mesh in the current context
 */
export declare function useXRMesh(): XRMesh;
/**
 * hook for getting all dected meshes with the provided semantic label
 */
export declare function useXRMeshes(semanticLabel?: string): readonly XRMesh[];
/**
 * hook for getting the geometry from the detected mesh
 * @param mesh the detected mesh
 * @param disposeBuffer allows to disable auto disposing the geometry buffer
 */
export declare function useXRMeshGeometry(mesh: XRMesh, disposeBuffer?: boolean): BufferGeometry;
