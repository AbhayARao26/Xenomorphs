/// <reference types="react" />
import { MeshProps } from '@react-three/fiber';
import { BufferGeometry, Mesh } from 'three';
/**
 * component for rendering a mesh for the XRPlane based on the detected plane geometry
 */
export declare const XRPlaneModel: import("react").ForwardRefExoticComponent<Omit<MeshProps, "ref"> & import("react").RefAttributes<Mesh<BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>>>;
/**
 * hook for getting the detected plane in the current context
 */
export declare function useXRPlane(): XRPlane;
/**
 * hook for getting all dected planes with the provided semantic label
 */
export declare function useXRPlanes(semanticLabel?: string): readonly XRPlane[];
/**
 * hook for getting the geometry from the detected plane
 * @param plane the detected plane
 * @param disposeBuffer allows to disable auto disposing the geometry buffer
 */
export declare function useXRPlaneGeometry(plane: XRPlane, disposeBuffer?: boolean): BufferGeometry;
