/// <reference types="webxr" />
import { RefObject } from 'react';
import { GetWorldMatrixFromXRHitTest } from '@pmndrs/xr';
import { Group, Matrix4, Object3D } from 'three';
export { createXRHitTestSource, requestXRHitTest, type GetWorldMatrixFromXRHitTest } from '@pmndrs/xr';
/**
 * hook for creating a hit test source originating from the provided object or xrspace
 */
export declare function useXRHitTestSource(relativeTo: RefObject<Object3D> | XRSpace, trackableType?: XRHitTestTrackableType | Array<XRHitTestTrackableType>): {
    source: XRHitTestSource;
    getWorldMatrix: (target: Matrix4, result: XRHitTestResult) => boolean;
} | undefined;
/**
 * hook for setting up a continous hit test originating from the provided object or xrspace
 */
export declare function useXRHitTest(fn: ((results: Array<XRHitTestResult>, getWorldMatrix: GetWorldMatrixFromXRHitTest) => void) | undefined, relativeTo: RefObject<Object3D> | XRSpace, trackableType?: XRHitTestTrackableType | Array<XRHitTestTrackableType>): void;
/**
 * hook that returns a function to request a single hit test
 */
export declare function useXRRequestHitTest(): (relativeTo: RefObject<Object3D> | XRSpace, trackableType?: XRHitTestTrackableType | Array<XRHitTestTrackableType>) => Promise<{
    results: XRHitTestResult[];
    getWorldMatrix: (target: Matrix4, result: XRHitTestResult) => boolean;
} | undefined> | undefined;
/**
 * component for getting hit tests originating based on its position in the scene graph
 */
export declare const XRHitTest: import("react").ForwardRefExoticComponent<Omit<Omit<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<Group<import("three").Object3DEventMap>>, import("@react-three/fiber").NodeProps<Group<import("three").Object3DEventMap>, typeof Group>>>, import("@react-three/fiber").NonFunctionKeys<{
    position?: import("@react-three/fiber").Vector3 | undefined;
    up?: import("@react-three/fiber").Vector3 | undefined;
    scale?: import("@react-three/fiber").Vector3 | undefined;
    rotation?: import("@react-three/fiber").Euler | undefined;
    matrix?: import("@react-three/fiber").Matrix4 | undefined;
    quaternion?: import("@react-three/fiber").Quaternion | undefined;
    layers?: import("@react-three/fiber").Layers | undefined;
    dispose?: (() => void) | null | undefined;
}>> & {
    position?: import("@react-three/fiber").Vector3 | undefined;
    up?: import("@react-three/fiber").Vector3 | undefined;
    scale?: import("@react-three/fiber").Vector3 | undefined;
    rotation?: import("@react-three/fiber").Euler | undefined;
    matrix?: import("@react-three/fiber").Matrix4 | undefined;
    quaternion?: import("@react-three/fiber").Quaternion | undefined;
    layers?: import("@react-three/fiber").Layers | undefined;
    dispose?: (() => void) | null | undefined;
} & import("@react-three/fiber/dist/declarations/src/core/events.js").EventHandlers & {
    trackableType?: XRHitTestTrackableType | XRHitTestTrackableType[] | undefined;
    onResults?: ((results: Array<XRHitTestResult>, getWorldMatrix: GetWorldMatrixFromXRHitTest) => void) | undefined;
}, "ref"> & import("react").RefAttributes<Group<import("three").Object3DEventMap>>>;
