import { Object3D } from 'three';
import { DefaultXRInputSourceTeleportPointerOptions, XRControllerState, XRHandState, XRInputSourceState, XRStore } from '../internals.js';
import { XRElementImplementations } from './xr.js';
import { DefaultXRControllerOptions, DefaultXRGazeOptions, DefaultXRHandOptions, DefaultXRHandTouchPointerOptions, DefaultXRInputSourceGrabPointerOptions, DefaultXRInputSourceRayPointerOptions, DefaultXRScreenInputOptions, DefaultXRTransientPointerOptions } from '../default.js';
import { CombinedPointer } from '@pmndrs/pointer-events';
import { XRSpaceType } from './types.js';
export declare function createDefaultXRInputSourceRayPointer(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRInputSourceState, session: XRSession, options?: DefaultXRInputSourceRayPointerOptions, combined?: CombinedPointer, makeDefault?: boolean): () => void;
export declare function createDefaultXRInputSourceTeleportPointer(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRInputSourceState, session: XRSession, options?: DefaultXRInputSourceTeleportPointerOptions, combined?: CombinedPointer, makeDefault?: boolean): () => void;
export declare function createDefaultXRInputSourceGrabPointer(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRInputSourceState, gripSpace: XRSpaceType, session: XRSession, event: 'select' | 'squeeze', options?: DefaultXRInputSourceGrabPointerOptions, combined?: CombinedPointer, makeDefault?: boolean): () => void;
export declare function createDefaultXRHandTouchPointer(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRHandState, options?: DefaultXRHandTouchPointerOptions, combined?: CombinedPointer, makeDefault?: boolean): () => void;
export declare function createDefaultXRHand(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRHandState, session: XRSession, { grabPointer: grabPointerOptions, rayPointer: rayPointerOptions, teleportPointer: teleportPointerOptions, model: modelOptions, touchPointer: touchPointerOptions, }?: DefaultXRHandOptions): () => void;
export declare function createDefaultXRController(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRControllerState, session: XRSession, { rayPointer: rayPointerOptions, grabPointer: grabPointerOptions, teleportPointer: teleportPointerOptions, model: modelOptions, }?: DefaultXRControllerOptions): () => void;
export declare function createDefaultXRTransientPointer(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRInputSourceState, session: XRSession, options?: DefaultXRTransientPointerOptions, combined?: CombinedPointer, makeDefault?: boolean): () => void;
export declare function createDefaultXRGaze(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRInputSourceState, session: XRSession, options?: DefaultXRGazeOptions): () => void;
export declare function createDefaultXRScreenInput(scene: Object3D, store: XRStore<XRElementImplementations>, space: Object3D, state: XRInputSourceState, session: XRSession, options?: DefaultXRScreenInputOptions): () => void;
