export function createGetXRSpaceMatrix(space, referenceSpace) {
    return (target, frame) => {
        if (space === referenceSpace) {
            target.identity();
            return true;
        }
        const resolvedReferenceSpace = typeof referenceSpace === 'function' ? referenceSpace() : referenceSpace;
        if (resolvedReferenceSpace == null) {
            return false;
        }
        const pose = frame?.getPose(space, resolvedReferenceSpace);
        if (pose == null) {
            return false;
        }
        target.fromArray(pose.transform.matrix);
        return true;
    };
}
export function computeOriginReferenceSpaceOffset(object, origin, target) {
    if (origin == null) {
        target.copy(object.matrixWorld);
        return;
    }
    target.copy(origin.matrixWorld).invert().multiply(object.matrixWorld);
}
export function getSpaceFromAncestors(object, origin, originReferenceSpace, targetOffsetMatrix) {
    targetOffsetMatrix?.copy(object.matrix);
    const result = getXRSpaceFromAncestorsRec(object, targetOffsetMatrix);
    if (result != null || origin == null || originReferenceSpace == null) {
        return result;
    }
    if (targetOffsetMatrix != null) {
        computeOriginReferenceSpaceOffset(object, origin, targetOffsetMatrix);
    }
    return originReferenceSpace;
}
function getXRSpaceFromAncestorsRec({ parent }, targetOffsetMatrix) {
    if (parent == null) {
        return undefined;
    }
    if (targetOffsetMatrix != null) {
        targetOffsetMatrix.premultiply(parent.matrix);
    }
    return parent.xrSpace ?? getXRSpaceFromAncestorsRec(parent, targetOffsetMatrix);
}
